from NIDS.modules.SecureData import SecureData

class Alert:
    """Represents an alert generated by the NIDS."""

    HEADERS_NAMES = ["Level", "Timestamp", "Source IP", "Destination IP", "Protocol", "Size", "Flags"]
    # HEADERS_WIDTHS = [15, 15, 30, 30, 10, 10, 10]  
    # VALUES_WIDTHS = [24, 15, 30, 30, 10, 10, 10] 
    HEADERS_WIDTHS = [10, 10, 20, 20, 10, 5, 10]  
    VALUES_WIDTHS = [20, 10, 20, 20, 10, 5, 10] 
    is_headers_displayed = False  

    def __init__(self, alert_level, src_ip, dst_ip, protocol, timestamp, deport, srport, payload, packet_size, flags):
        self.alert_level = alert_level
        self.src_ip = src_ip
        self.dst_ip = dst_ip
        self.protocol = protocol
        self.timestamp = timestamp
        self.deport = deport
        self.srport = srport
        self.payload = payload
        self.packet_size = packet_size
        self.flags = flags
        self.encryption_key = b"1234567890123456"

    def to_json(self):
        """Prepare data to send to the server

        Returns:
            dict: data in dictionary format including headers
        """
        payload_str = str(self.payload) if self.payload else None

        data_dict = {
            "alert_level": self.alert_level,
            "src_ip": self.src_ip,
            "dst_ip": self.dst_ip,
            "protocol": self.protocol,
            "timestamp": self.timestamp,
            "deport": self.deport,
            "srport": self.srport,
            "payload": payload_str,
            "packet_size": self.packet_size,
            "flags": self.flags
        }

        encrypted_data = SecureData(
            data=data_dict,
            key=self.encryption_key, 
            operation="Encryption"
        ).result

        return encrypted_data


    @staticmethod
    def from_json(data, key):
        """Create an Alert object from JSON data.

        Args:
            data (str): JSON string containing alert data.
            key (int): the encryption key to decrypt data

        Returns:
            Alert: An instance of the Alert class.
        """
        decrypted_data = SecureData(data=data, key=key , operation="Decryption").result
        alert_data = decrypted_data

        return Alert(
            alert_level=alert_data["alert_level"],
            src_ip=alert_data["src_ip"],
            dst_ip=alert_data["dst_ip"],
            protocol=alert_data["protocol"],
            timestamp=alert_data["timestamp"],
            deport=alert_data["deport"],
            srport=alert_data["srport"],
            payload=alert_data["payload"],
            packet_size=alert_data["packet_size"],
            flags=alert_data["flags"]
        )


    @classmethod
    def display_headers(cls):
        """Displays the table headers with proper alignment."""
        header_row = []
        for name, width in zip(cls.HEADERS_NAMES, cls.HEADERS_WIDTHS):
            header_row.append(name.ljust(width))  # Left-align headers within the specified width
        print("-" * 100) # display top border
        print(" ".join(header_row))  
        print("-" * 100) # display bottom border
        cls.is_headers_displayed = True # only display headers once

    def display_table(self):
        """Displays the alert in a table format with proper alignment."""
        if not Alert.is_headers_displayed:  # Check if headers already displayed
            Alert.display_headers()  

        # Define alert level text and color
        alert_level_text = {
            "Low": "LOW",   
            "Moderate": "MODERATE",
            "High": "HIGH", 
            "Critical": "CRITICAL", 
        }.get(self.alert_level, 'NORMAL')

        # Low will be displayed as yellow, Moderate as orange, High as red, Critical as dark red
        alert_colors = {
            "Low": "\033[93m",
            "Moderate": "\033[33m",
            "High": "\033[91m",
            "Critical": "\033[31m",
        }
        color = alert_colors.get(self.alert_level, "\033[92m") 
        if(self.srport):
            src = f"{self.src_ip}:{self.srport}"
        else:
            src = f"{self.src_ip}"
        if(self.deport):
            dst = f"{self.dst_ip}:{self.deport}"
        else:
            dst = f"{self.dst_ip}"

        row = [
            f"{color}[{alert_level_text}]\033[0m".ljust(self.VALUES_WIDTHS[0]),  
            str(self.timestamp).ljust(self.VALUES_WIDTHS[1]), 
            str(f"{src}").ljust(self.VALUES_WIDTHS[2]),   
            str(f"{dst}").ljust(self.VALUES_WIDTHS[3]),    
            str(self.protocol).ljust(self.VALUES_WIDTHS[4]), 
            str(self.packet_size).ljust(self.VALUES_WIDTHS[5]),
            str(self.flags).ljust(self.VALUES_WIDTHS[6]),   
        ]

        print(" ".join(row))

